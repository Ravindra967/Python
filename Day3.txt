

## ✅ **3. Control Flow in Python**

Control flow helps decide **what parts of code should run**, and **how often**. It's the core of logic-building in programming.

---

### 🔹 `if`, `elif`, `else`

These are **conditional statements** used to execute code blocks based on whether a condition is `True` or `False`.

#### 📌 Syntax:

```python
if condition:
    # code block
elif another_condition:
    # code block
else:
    # fallback code
```

#### 💡 Example:

```python
marks = 85

if marks >= 90:
    print("Grade: A")
elif marks >= 75:
    print("Grade: B")
else:
    print("Grade: C")
```

#### ✅ Output:

```
Grade: B
```

---

### 🔹 `while` loop

A `while` loop **executes repeatedly** as long as a condition is `True`.

#### 📌 Syntax:

```python
while condition:
    # code block
```

#### 💡 Example:

```python
count = 1
while count <= 5:
    print("Count is:", count)
    count += 1
```

#### ✅ Output:

```
Count is: 1
Count is: 2
Count is: 3
Count is: 4
Count is: 5
```

> ⚠️ Be careful! If the condition never becomes false, the loop will run forever.

---

### 🔹 `for` loop

Used to **iterate over sequences** like lists, strings, ranges, etc.

#### 📌 Syntax:

```python
for variable in sequence:
    # code block
```

#### 💡 Example:

```python
for name in ["Ravi", "Meena", "Amit"]:
    print("Hello", name)
```

#### ✅ Output:

```
Hello Ravi
Hello Meena
Hello Amit
```

You can also use `range()` to loop over a sequence of numbers:

```python
for i in range(1, 6):
    print(i)
```

---

### 🔹 `break`, `continue`, `pass`

These **control loop execution**.

#### ✅ `break`: Exits the loop immediately.

```python
for i in range(1, 10):
    if i == 5:
        break
    print(i)
```

**Output:** `1 2 3 4`

---

#### ✅ `continue`: Skips current iteration, continues to next.

```python
for i in range(1, 6):
    if i == 3:
        continue
    print(i)
```

**Output:** `1 2 4 5`

---

#### ✅ `pass`: Does nothing (acts as a placeholder).

```python
for i in range(3):
    pass  # Placeholder for future code
```

**Output:** (No output — it just passes.)

---

### 🔹 Nested Loops

A **loop inside another loop**. Often used for matrices or grids.

#### 💡 Example:

```python
for i in range(1, 4):         # Outer loop
    for j in range(1, 4):     # Inner loop
        print(f"{i} x {j} = {i * j}")
    print("-----")
```

#### ✅ Output:

```
1 x 1 = 1
1 x 2 = 2
1 x 3 = 3
-----
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
-----
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
-----
```

> 🧠 Think of nested loops as rows and columns in a table or grid.

---

## 🔚 Summary

| Control Flow Type | Usage                             |
| ----------------- | --------------------------------- |
| `if/elif/else`    | Conditional branching             |
| `while` loop      | Repeat until a condition is false |
| `for` loop        | Iterate over a sequence           |
| `break`           | Exit a loop                       |
| `continue`        | Skip current iteration            |
| `pass`            | Do nothing (placeholder)          |
| Nested Loops      | For multi-level iterations        |


